"use client"

import { useState, useEffect, useRef } from "react"
import { useRouter } from "next/navigation"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Slider } from "@/components/ui/slider"
import { Badge } from "@/components/ui/badge"
import { ArrowLeft, Download, Palette, ImageIcon, RotateCcw, Copy, Sparkles, Settings } from "lucide-react"
import { QRGenerator } from "../components/QRGenerator"

export default function GeneratePage() {
  const [prompt, setPrompt] = useState("")
  const [qrData, setQrData] = useState("")
  const [qrDataUrl, setQrDataUrl] = useState("")
  const [isLoading, setIsLoading] = useState(true)
  const [error, setError] = useState("")

  // Customization options
  const [foregroundColor, setForegroundColor] = useState("#000000")
  const [backgroundColor, setBackgroundColor] = useState("#ffffff")
  const [size, setSize] = useState([256])
  const [logo, setLogo] = useState(null)
  const [logoSize, setLogoSize] = useState([15])

  const router = useRouter()
  const fileInputRef = useRef(null)

  useEffect(() => {
    const storedPrompt = sessionStorage.getItem("qr-prompt")
    if (storedPrompt) {
      setPrompt(storedPrompt)
      processPrompt(storedPrompt)
    } else {
      router.push("/")
    }
  }, [router])

  const processPrompt = async (userPrompt) => {
    setIsLoading(true)
    setError("")

    try {
      // Simulate Gemini API call - In production, replace with actual API call
      const processedData = await simulateGeminiAPI(userPrompt)
      setQrData(processedData)

      // Store analytics
      storeAnalytics(userPrompt, processedData)
    } catch (err) {
      setError("Failed to process your request. Please try again.")
      console.error("Error processing prompt:", err)
    } finally {
      setIsLoading(false)
    }
  }

  const simulateGeminiAPI = async (prompt) => {
    // Simulate API delay
    await new Promise((resolve) => setTimeout(resolve, 1500))

    const lowerPrompt = prompt.toLowerCase()

    // WiFi QR detection
    if (lowerPrompt.includes("wifi") || lowerPrompt.includes("network")) {
      const networkMatch = prompt.match(/named?\s+([^\s,]+)/i)
      const passwordMatch = prompt.match(/password\s+([^\s,]+)/i)

      const network = networkMatch ? networkMatch[1] : "MyNetwork"
      const password = passwordMatch ? passwordMatch[1] : "password123"

      return `WIFI:S:${network};T:WPA;P:${password};;`
    }

    // Contact/vCard detection
    if (lowerPrompt.includes("contact") || lowerPrompt.includes("vcard")) {
      const nameMatch = prompt.match(/(?:for|contact)\s+([^,]+?)(?:\s*,|\s+phone|\s+email|$)/i)
      const phoneMatch = prompt.match(/phone\s+([^\s,]+)/i)
      const emailMatch = prompt.match(/email\s+([^\s,]+)/i)

      const name = nameMatch ? nameMatch[1].trim() : "John Doe"
      const phone = phoneMatch ? phoneMatch[1] : ""
      const email = emailMatch ? emailMatch[1] : ""

      return `BEGIN:VCARD
VERSION:3.0
FN:${name}
TEL:${phone}
EMAIL:${email}
END:VCARD`
    }

    // Event detection
    if (lowerPrompt.includes("event") || lowerPrompt.includes("ticket")) {
      const eventMatch = prompt.match(/(?:for|event)\s+([^,]+?)(?:\s*,|\s+on|\s+date|$)/i)
      const dateMatch = prompt.match(/(?:on|date)\s+([^,]+)/i)

      const eventName = eventMatch ? eventMatch[1].trim() : "Event"
      const date = dateMatch ? dateMatch[1].trim() : "TBD"

      return `Event: ${eventName}
Date: ${date}
Generated by SmartQR`
    }

    // URL detection
    const urlMatch = prompt.match(/(https?:\/\/[^\s]+)/i)
    if (urlMatch) {
      return urlMatch[1]
    }

    // Default: treat as text
    return prompt
  }

  const storeAnalytics = (prompt, data) => {
    const analytics = JSON.parse(localStorage.getItem("qr-analytics") || "[]")
    const newEntry = {
      id: Date.now(),
      prompt,
      data,
      timestamp: new Date().toISOString(),
      type: detectQRType(data),
    }
    analytics.push(newEntry)
    localStorage.setItem("qr-analytics", JSON.stringify(analytics))
  }

  const detectQRType = (data) => {
    if (data.startsWith("WIFI:")) return "WiFi"
    if (data.startsWith("BEGIN:VCARD")) return "Contact"
    if (data.startsWith("http")) return "URL"
    return "Text"
  }

  const handleLogoUpload = (event) => {
    const file = event.target.files[0]
    if (file) {
      const reader = new FileReader()
      reader.onload = (e) => {
        setLogo(e.target.result)
      }
      reader.readAsDataURL(file)
    }
  }

  const downloadQR = () => {
    if (qrDataUrl) {
      const link = document.createElement("a")
      link.download = `smartqr-${Date.now()}.png`
      link.href = qrDataUrl
      link.click()
    }
  }

  const copyToClipboard = () => {
    if (qrData.startsWith("http")) {
      navigator.clipboard.writeText(qrData)
      // You could add a toast notification here
    }
  }

  const resetCustomization = () => {
    setForegroundColor("#000000")
    setBackgroundColor("#ffffff")
    setSize([256])
    setLogo(null)
    setLogoSize([15])
  }

  if (isLoading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-slate-50 via-white to-slate-100 flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4"></div>
          <h2 className="text-xl font-semibold text-slate-900 mb-2">Processing your request...</h2>
          <p className="text-slate-600">AI is understanding your prompt</p>
        </div>
      </div>
    )
  }

  if (error) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-slate-50 via-white to-slate-100 flex items-center justify-center">
        <div className="text-center">
          <div className="text-red-500 text-4xl mb-4">⚠️</div>
          <h2 className="text-xl font-semibold text-slate-900 mb-2">Something went wrong</h2>
          <p className="text-slate-600 mb-4">{error}</p>
          <Button onClick={() => router.push("/")}>
            <ArrowLeft className="w-4 h-4 mr-2" />
            Go Back
          </Button>
        </div>
      </div>
    )
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-50 via-white to-slate-100">
      {/* Header */}
      <header className="border-b border-slate-200/60 bg-white/80 backdrop-blur-sm sticky top-0 z-50">
        <div className="container mx-auto px-4 py-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-4">
              <Button variant="ghost" onClick={() => router.push("/")}>
                <ArrowLeft className="w-4 h-4 mr-2" />
                Back
              </Button>
              <div className="flex items-center space-x-2">
                <div className="w-8 h-8 bg-gradient-to-br from-blue-600 to-purple-600 rounded-lg flex items-center justify-center">
                  <Sparkles className="w-5 h-5 text-white" />
                </div>
                <span className="text-xl font-bold bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent">
                  SmartQR
                </span>
              </div>
            </div>
          </div>
        </div>
      </header>

      <div className="container mx-auto px-4 py-8">
        <div className="grid lg:grid-cols-2 gap-8 max-w-6xl mx-auto">
          {/* QR Code Display */}
          <div className="space-y-6">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center">
                  <Sparkles className="w-5 h-5 mr-2 text-blue-600" />
                  Generated QR Code
                </CardTitle>
              </CardHeader>
              <CardContent className="text-center">
                <div className="bg-white p-6 rounded-lg shadow-sm inline-block mb-4">
                  <QRGenerator
                    data={qrData}
                    size={size[0]}
                    foregroundColor={foregroundColor}
                    backgroundColor={backgroundColor}
                    logo={logo}
                    logoSize={logoSize[0]}
                    onGenerated={(dataUrl) => setQrDataUrl(dataUrl)}
                  />
                </div>

                <div className="space-y-3">
                  <div className="flex gap-2 justify-center flex-wrap">
                    <Button onClick={downloadQR} className="bg-blue-600 hover:bg-blue-700">
                      <Download className="w-4 h-4 mr-2" />
                      Download PNG
                    </Button>
                    {qrData.startsWith("http") && (
                      <Button variant="outline" onClick={copyToClipboard}>
                        <Copy className="w-4 h-4 mr-2" />
                        Copy Link
                      </Button>
                    )}
                  </div>
                </div>
              </CardContent>
            </Card>

            {/* Interpreted Content */}
            <Card>
              <CardHeader>
                <CardTitle>Interpreted Content</CardTitle>
              </CardHeader>
              <CardContent>
                <Badge variant="secondary" className="mb-3">
                  {detectQRType(qrData)}
                </Badge>
                <pre className="bg-slate-50 p-4 rounded-lg text-sm overflow-x-auto whitespace-pre-wrap">{qrData}</pre>
              </CardContent>
            </Card>
          </div>

          {/* Customization Panel */}
          <div className="space-y-6">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center justify-between">
                  <span className="flex items-center">
                    <Settings className="w-5 h-5 mr-2" />
                    Customize QR Code
                  </span>
                  <Button variant="outline" size="sm" onClick={resetCustomization}>
                    <RotateCcw className="w-4 h-4 mr-2" />
                    Reset
                  </Button>
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-6">
                {/* Colors */}
                <div className="space-y-4">
                  <h3 className="font-semibold flex items-center">
                    <Palette className="w-4 h-4 mr-2" />
                    Colors
                  </h3>
                  <div className="grid grid-cols-2 gap-4">
                    <div>
                      <Label htmlFor="fg-color">Foreground</Label>
                      <div className="flex items-center space-x-2 mt-1">
                        <Input
                          id="fg-color"
                          type="color"
                          value={foregroundColor}
                          onChange={(e) => setForegroundColor(e.target.value)}
                          className="w-12 h-10 p-1 border rounded"
                        />
                        <Input
                          type="text"
                          value={foregroundColor}
                          onChange={(e) => setForegroundColor(e.target.value)}
                          className="flex-1"
                        />
                      </div>
                    </div>
                    <div>
                      <Label htmlFor="bg-color">Background</Label>
                      <div className="flex items-center space-x-2 mt-1">
                        <Input
                          id="bg-color"
                          type="color"
                          value={backgroundColor}
                          onChange={(e) => setBackgroundColor(e.target.value)}
                          className="w-12 h-10 p-1 border rounded"
                        />
                        <Input
                          type="text"
                          value={backgroundColor}
                          onChange={(e) => setBackgroundColor(e.target.value)}
                          className="flex-1"
                        />
                      </div>
                    </div>
                  </div>
                </div>

                {/* Size */}
                <div>
                  <Label>Size: {size[0]}px</Label>
                  <Slider value={size} onValueChange={setSize} max={512} min={128} step={32} className="mt-2" />
                </div>

                {/* Logo */}
                <div className="space-y-4">
                  <h3 className="font-semibold flex items-center">
                    <ImageIcon className="w-4 h-4 mr-2" />
                    Logo
                  </h3>
                  <div>
                    <input
                      ref={fileInputRef}
                      type="file"
                      accept="image/*"
                      onChange={handleLogoUpload}
                      className="hidden"
                    />
                    <Button variant="outline" onClick={() => fileInputRef.current?.click()} className="w-full">
                      <ImageIcon className="w-4 h-4 mr-2" />
                      {logo ? "Change Logo" : "Upload Logo"}
                    </Button>
                  </div>

                  {logo && (
                    <div>
                      <Label>Logo Size: {logoSize[0]}% (Optimized for scanning)</Label>
                      <Slider value={logoSize} onValueChange={setLogoSize} max={25} min={5} step={1} className="mt-2" />
                      <p className="text-xs text-slate-500 mt-1">
                        🎯 Logo is automatically masked and positioned for maximum QR code readability
                      </p>
                    </div>
                  )}
                </div>
              </CardContent>
            </Card>

            {/* Original Prompt */}
            <Card>
              <CardHeader>
                <CardTitle>Your Prompt</CardTitle>
              </CardHeader>
              <CardContent>
                <p className="text-slate-600 italic">"{prompt}"</p>
              </CardContent>
            </Card>
          </div>
        </div>
      </div>
    </div>
  )
}
